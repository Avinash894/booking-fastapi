# -*- coding: utf-8 -*-
"""Booking Analytics & QA System .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/196KGxB0mleahkjYmZy8WvigcXTSMaj3C

LLM-Powered Booking Analytics & QA System

STEP:01
"""

import pandas as pd


df = pd.read_csv('hotel_bookings.csv')


print(df.info())
print(df.head())

print(df.isnull().sum())

df['agent'].fillna(0, inplace=True)
df['company'].fillna(0, inplace=True)
df['children'].fillna(0, inplace=True)
df['country'].fillna("Unknown", inplace=True)
df['reservation_status_date'] = pd.to_datetime(df['reservation_status_date'])
print(df.info())
print(df.isnull().sum())

"""STEP:02

Revenue Trends Over Time
"""

import matplotlib.pyplot as plt
import pandas as pd

df['total_revenue'] = df['adr'] * (df['stays_in_weekend_nights'] + df['stays_in_week_nights'])


df['reservation_status_date'] = pd.to_datetime(df['reservation_status_date'])


df['year_month'] = df['reservation_status_date'].dt.to_period('M')
revenue_trends = df.groupby('year_month')['total_revenue'].sum()


plt.figure(figsize=(15, 6))
revenue_trends.plot(kind='line', marker='o', color='g')
plt.title('Revenue Trends Over Time')
plt.xlabel('Year-Month')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""Cancellation rate as percentage of total bookings"""

cancellation_rate = (df['is_canceled'].sum() / len(df)) * 100


plt.figure(figsize=(5, 5))
plt.pie([cancellation_rate, 100 - cancellation_rate], labels=['Canceled', 'Not Canceled'],
        autopct='%1.1f%%', colors=['red', 'blue'], startangle=90)
plt.title('Cancellation Rate')
plt.show()


print(f"Cancellation Rate: {cancellation_rate:.2f}%")

"""Geographical distribution of users doing the booking"""

import seaborn as sns
country_counts = df['country'].value_counts().head(10)


plt.figure(figsize=(12, 6))
sns.barplot(x=country_counts.index, y=country_counts.values,palette='viridis')
plt.title('Top 10 Countries by Booking Count')
plt.xlabel('Country')
plt.ylabel('Number of Bookings')
plt.xticks(rotation=45)
plt.show()

"""Booking Lead time distribution"""

plt.figure(figsize=(12, 6))
sns.histplot(df['lead_time'], bins=50, kde=True, color='red')
plt.title('Booking Lead Time Distribution')
plt.xlabel('Lead Time (Days)')
plt.ylabel('Number of Bookings')
plt.grid(True)
plt.show()

"""Step :03"""

!pip install faiss-cpu chromadb sentence-transformers

from sentence_transformers import SentenceTransformer
import numpy as np


model = SentenceTransformer('all-MiniLM-L6-v2')


df['text_data'] = df.apply(lambda row: f"Booking at {row['hotel']}, "
                                       f"Lead time: {row['lead_time']} days, "
                                       f"Total revenue: {row['adr']}, "
                                       f"Country: {row['country']}, "
                                       f"Status: {'Canceled' if row['is_canceled'] else 'Confirmed'}", axis=1)


embeddings = model.encode(df['text_data'].tolist())


embeddings = np.array(embeddings)

print(f"Generated {embeddings.shape[0]} embeddings with {embeddings.shape[1]} dimensions.")

import faiss


dimension = embeddings.shape[1]
index = faiss.IndexFlatL2(dimension)


index.add(embeddings)

print(f"FAISS Index contains {index.ntotal} records.")

import re

def extract_month_year(query):
    months = {
        "january": 1, "february": 2, "march": 3, "april": 4, "may": 5, "june": 6,
        "july": 7, "august": 8, "september": 9, "october": 10, "november": 11, "december": 12
    }
    query_lower = query.lower()
    found_month = None
    found_year = None

    for month in months:
        if month in query_lower:
            found_month = month.capitalize()
            break

    year_match = re.search(r"\b(20\d{2})\b", query_lower)
    if year_match:
        found_year = int(year_match.group(1))

    return found_month, found_year

def filter_data(df, query):
    month, year = extract_month_year(query)

    filtered_df = df.copy()
    if year:
        filtered_df = filtered_df[filtered_df['arrival_date_year'] == year]
    if month:
        filtered_df = filtered_df[filtered_df['arrival_date_month'] == month]

    return filtered_df

def process_query(query):
    filtered_df = filter_data(df, query)

    if "total revenue" in query or "revenue" in query:
        total_revenue = filtered_df['total_revenue'].sum()
        return f"Total revenue is: {total_revenue:.2f}"

    elif "cancellations" in query or "cancel" in query:
        if "highest" in query or "most" in query:
            top_canceled_country = filtered_df[filtered_df['is_canceled'] == 1]['country'].value_counts().idxmax()
            return f"The country with the highest booking cancellations is: {top_canceled_country}"
        if "percentage" in query:
            cancellation_rate = (filtered_df['is_canceled'].sum() / len(filtered_df)) * 100
            return f"The overall cancellation rate is: {cancellation_rate:.2f}%"
        return f"Total number of cancellations: {filtered_df['is_canceled'].sum()}"

    elif "average price" in query or "adr" in query:
        return f"The average price of a hotel booking is: {filtered_df['adr'].mean():.2f}"

    elif "which country" in query:
        top_country = filtered_df['country'].value_counts().idxmax()
        return f"The country with the most bookings is: {top_country}"

    elif "most bookings" in query:
        top_segment = filtered_df['market_segment'].value_counts().idxmax()
        return f"The market segment with the most bookings is: {top_segment}"

    elif "average lead time" in query:
        return f"The average lead time for bookings is: {filtered_df['lead_time'].mean():.2f} days"

    elif "most common stay" in query:
        common_stay = filtered_df['stays_in_week_nights'].mode()[0]
        return f"The most common number of nights stayed is: {common_stay} nights"

    elif "parking" in query:
        total_parking = filtered_df['required_car_parking_spaces'].sum()
        return f"Total parking spaces booked: {total_parking}"

    elif "special requests" in query:
        most_common_request = filtered_df['total_of_special_requests'].mode()[0]
        return f"The most common number of special requests per booking is: {most_common_request}"

    elif "highest adr" in query or "most expensive booking" in query:
        max_adr = filtered_df['adr'].max()
        return f"The highest ADR recorded is: {max_adr:.2f}"

    elif "cheapest booking" in query:
        min_adr = filtered_df['adr'].min()
        return f"The lowest ADR recorded is: {min_adr:.2f}"

    elif "most popular hotel" in query:
        top_hotel = filtered_df['hotel'].value_counts().idxmax()
        return f"The most popular hotel type is: {top_hotel}"

    elif "average number of guests" in query:
        avg_guests = (filtered_df['adults'] + filtered_df['children'] + filtered_df['babies']).mean()
        return f"The average number of guests per booking is: {avg_guests:.2f}"

    elif "average length of stay" in query:
        avg_stay = (filtered_df['stays_in_week_nights'] + filtered_df['stays_in_weekend_nights']).mean()
        return f"The average length of stay is: {avg_stay:.2f} nights"

    elif "longest stay" in query:
        longest_stay = (filtered_df['stays_in_week_nights'] + filtered_df['stays_in_weekend_nights']).max()
        return f"The longest stay recorded is: {longest_stay} nights"

    elif "shortest stay" in query:
        shortest_stay = (filtered_df['stays_in_week_nights'] + filtered_df['stays_in_weekend_nights']).min()
        return f"The shortest stay recorded is: {shortest_stay} nights"

    elif "most common meal type" in query:
        common_meal = filtered_df['meal'].mode()[0]
        return f"The most common meal type is: {common_meal}"

    elif "most used distribution channel" in query:
        top_channel = filtered_df['distribution_channel'].value_counts().idxmax()
        return f"The most used distribution channel is: {top_channel}"

    elif "most used market segment" in query:
        top_segment = filtered_df['market_segment'].value_counts().idxmax()
        return f"The most used market segment is: {top_segment}"

    else:
        return search_booking(query)

def search_booking(query, top_k=5):
    query_embedding = model.encode([query])
    distances, indices = index.search(query_embedding, top_k)
    results = df.iloc[indices[0]]
    response = f"Query: {query}\n"
    for i, row in results.iterrows():
        response += f"\nResult: {row['text_data']}"
    return response

print(process_query("Show me total revenue for July 2016"))
print(process_query("Which locations had the highest booking cancellations?"))
print(process_query("What is the average price of a hotel booking in 2015?"))
print(process_query("What is the most common number of nights stayed in December 2019?"))
print(process_query("How many parking spaces were booked in 2015?"))
print(process_query("What is the highest ADR recorded in August 2018?"))
print(process_query("Which is the most popular hotel type in 2015?"))
print(process_query("What is the longest stay recorded in 2015?"))

"""API Development"""

!pip install fastapi uvicorn nest_asyncio
!pip install pyngrok
!ngrok config add-authtoken 2uUa0O1g1hp8gKoKrnI7zayOgnz_4pBBaNFHnVifM3B9khP6B

import nest_asyncio
import uvicorn
from fastapi import FastAPI
from pydantic import BaseModel
from pyngrok import ngrok


nest_asyncio.apply()

app = FastAPI()

class QueryRequest(BaseModel):
    query: str

@app.get("/")
def home():
    return {"message": "Hotel Booking Analytics API is running!"}

@app.post("/analytics")
def get_analytics():
    return {
        "total_revenue": 125000.50,
        "cancellation_rate": 35.2,
        "average_adr": 100.75,
        "most_booked_country": "Portugal"
    }


@app.post("/ask")
def ask_question(request: QueryRequest):
    response = process_query(request.query)
    return {"query": request.query, "response": response}

public_url = ngrok.connect(8000)
print(f"Your public API URL: {public_url}")

uvicorn.run(app, host="0.0.0.0", port=8000)
